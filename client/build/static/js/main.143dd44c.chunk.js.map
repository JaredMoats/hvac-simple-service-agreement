{"version":3,"sources":["logo.svg","components/auth/Register.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Register","_ref","setToken","_useState","useState","firstName","lastName","email","companyName","password","password2","role","selectedOption","_useState2","Object","slicedToArray","formData","setFormData","onChange","event","_objectSpread2","objectSpread","defineProperty","target","name","value","onSubmit","_ref2","asyncToGenerator","regenerator_default","a","mark","_callee","production","config","body","res","wrap","_context","prev","next","preventDefault","alert","headers","Content-Type","JSON","stringify","console","log","axios","post","sent","data","token","t0","response","stop","_x","apply","this","arguments","react_default","createElement","react","className","style","fontSize","href","type","placeholder","required","checked","class","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","setState","_this2","auth_Register","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.143dd44c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Fragment, useState } from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport axios from \"axios\";\n\nconst Register = ({ setToken }) => {\n\n    const [formData, setFormData] = useState({\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        companyName: \"\",\n        password: \"\",\n        password2: \"\",\n        role: \"\",\n        selectedOption: \"\"\n    });\n\n    const { \n        firstName,\n        lastName,\n        email,\n        companyName,\n        password,\n        password2,\n        role,\n        selectedOption\n     } = formData;\n\n    const h1 = {\n        fontSize: \"40px\"\n    }\n\n    const h2 = {\n        fontSize: \"20px\"\n    }\n\n    const onChange = event => {\n        setFormData({ ...formData, [event.target.name]: event.target.value, selectedOption: event.target.value });\n    }\n\n    /*const checkRadioButton = event => {\n        setFormData({ ...formData, role: event.target.value, selectedOption: event.target.value });\n        console.log(\"role is: \" + role);\n    }*/\n\n    const onSubmit = async event => {\n        event.preventDefault();\n        const local = \"http://localhost:5000/api/employees\";\n        const production = \"/api/employees\";\n\n        if(password !== password2) {\n            alert(\"Passwords do not match\");\n        } else {\n            //post request to create new employee\n            const config = {\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            }\n\n            const body = JSON.stringify({ firstName, lastName, companyName, email, password, role });\n            console.log(\"JSON form data: \" + body);\n\n            try {\n                const res = await axios.post(production, body, config);\n                setToken(res.data.token);\n            } catch (error) {\n                console.log(error.response.data);\n            }\n        }\n    }\n\n    return (\n        <Fragment>\n            <h1 className=\"has-text-black\" style={ h1 }>Welcome to Simple Service Agreement</h1>\n            <h2 className=\"has-text-black\" style={ h2 }>Register or <a href=\"#\">Login</a></h2>\n            <div className=\"card\">\n                <form onSubmit={ event => onSubmit(event) }>\n                    <div className=\"field\">\n                        <label className=\"label\">First Name</label>\n                        <div className=\"control has-icons-left\">\n                            <input className=\"input\" type=\"text\" placeholder=\"First Name\" name=\"firstName\" value={firstName} onChange={ event => onChange(event)} required />\n                            \n                        </div>\n                    </div>\n                    <div className=\"field\">\n                        <label className=\"label\">Last Name</label>\n                        <div className=\"control has-icons-left\">\n                            <input className=\"input\" type=\"text\" placeholder=\"Last Name\" name=\"lastName\" value={lastName} onChange={ event => onChange(event)} required/>\n                            \n                        </div>\n                    </div>\n                    <div className=\"field\">\n                        <label className=\"label\">Company Name</label>\n                        <div className=\"control has-icons-left\">\n                            <input className=\"input\" type=\"text\" placeholder=\"Company Name\" name=\"companyName\" value={companyName} onChange={ event => onChange(event)} required/>\n                            \n                        </div>\n                    </div>\n                    <div className=\"field\">\n                        <label className=\"label\">Email</label>\n                        <div className=\"control has-icons-left\">\n                            <input className=\"input\" type=\"text\" placeholder=\"Email\" name=\"email\" value={email} onChange={ event => onChange(event)} required/>\n                            \n                        </div>\n                    </div>\n                    <div className=\"field\">\n                        <label className=\"label\">Password</label>\n                        <div className=\"control has-icons-left\">\n                            <input className=\"input\" type=\"password\" placeholder=\"Password\" name=\"password\" value={password} onChange={ event => onChange(event)} required/>\n                            \n                        </div>\n                    </div>\n                    <div className=\"field\">\n                        <label className=\"label\">Confirm Password</label>\n                        <div className=\"control has-icons-left\">\n                            <input className=\"input\" type=\"password\" placeholder=\"Confirm Password\" name=\"password2\" value={password2} onChange={ event => onChange(event)} required/>\n                            \n                        </div>\n                    </div>\n                    <div className=\"field\">\n                        <label className=\"radio\">\n                            Technician\n                            <input type=\"radio\" name=\"role\" value=\"technician\" checked={selectedOption === \"technician\"} onChange={ event => onChange(event) }/>\n                        </label>\n                        <label className=\"radio\">\n                            Dispatcher\n                            <input type=\"radio\" name=\"role\" value=\"dispatcher\" checked={selectedOption === \"dispatcher\"} onChange={ event => onChange(event) }/>\n                        </label>\n                        <label className=\"radio\">\n                            Dealer\n                            <input type=\"radio\" name=\"role\" value=\"dealer\" checked={ selectedOption === \"dealer\" } onChange={ event => onChange(event) }/>\n                        </label>\n                    </div>\n                    <input type=\"submit\" class=\"button is-success\" />\n                </form>\n            </div>\n        </Fragment>\n    );\n}\n\nexport default Register;\n","import React, {Component} from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Register from \"./components/auth/Register\";\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      token: \"\"\n    }\n  }\n\n  setToken(token) {\n    this.setState({ token });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Register \n          setToken={ token => this.setToken(token) }\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}